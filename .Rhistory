tvpro_nm_df
tvpro_nm_df
gsub(tvpro_nm_df$tvpro_nm, " ", "")
gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df$tvpro_nm  = gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df
## adding words into dic
dics <- c('sejong')
user_d <- tvpro_nm_df
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
library(KoNLP); useSejongDic()
# 단어 사전에 추가하기----
tvpro_nm
tvpro_nm <- read_csv("data/tvprograms_name.txt", col_names = FALSE)
# 단어 사전에 추가하기----
tvpro_nm <- read_csv("data/tvprograms_name.txt", col_names = FALSE)
tvpro_nm_df <- as.data.frame(t(tvpro_nm))
rownames(tvpro_nm_df) <- NULL; tvpro_nm_df
rep('ncn', nrow(tvpro_nm_df))
tvpro_nm_df <- data.frame(tvpro_nm = tvpro_nm_df$V1, tag=rep('ncn', nrow(tvpro_nm_df)))
rownames(tvpro_nm_df) <- NULL
tvpro_nm_df
tvpro_nm_df$tvpro_nm  = gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df
user_d <- tvpro_nm_df
## adding words into dic
dics <- c('sejong')
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
## mergeUserDic() ----
mergeUserDic(data.frame("사이다", "ncn"))
buildDictionary(data.frame("여보세요", "ncn"))
library(KoNLP); useSejongDic()
# 단어 사전에 추가하기----
tvpro_nm <- read_csv("data/tvprograms_name.txt", col_names = FALSE)
tvpro_nm_df <- as.data.frame(t(tvpro_nm))
rownames(tvpro_nm_df) <- NULL; tvpro_nm_df
rep('ncn', nrow(tvpro_nm_df))
tvpro_nm_df <- data.frame(tvpro_nm = tvpro_nm_df$V1, tag=rep('ncn', nrow(tvpro_nm_df)))
rownames(tvpro_nm_df) <- NULL
tvpro_nm_df
tvpro_nm_df$tvpro_nm  = gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df
user_d <- tvpro_nm_df
## adding words into dic :: buildDictionary()
dics <- c('sejong')
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
mergeUserDic(data.frame("한국은처음이지", "ncn"))
readLines("./data/tvprograms_name.txt")
readLines("./data/tvprograms_name.txt", fileEncoding='utf-8')
# install.packages('tm')
# install.packages('rJava')
# install.packages('KoNLP')
# install.packages('SnowballC')
# install.packages('slam')
library(rJava)
library(KoNLP); useSejongDic()
library(SnowballC)
library(slam)
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest')
lapply(Packages, library, character.only=T)
options(mc.cores=1) # not multi_core
# 단어 사전에 추가하기----
tvpro_nm <- read_csv("./data/tvprograms_name.txt", col_names = FALSE)
tvpro_nm_df <- as.data.frame(t(tvpro_nm))
rownames(tvpro_nm_df) <- NULL; tvpro_nm_df
rep('ncn', nrow(tvpro_nm_df))
tvpro_nm_df <- data.frame(tvpro_nm = tvpro_nm_df$V1, tag=rep('ncn', nrow(tvpro_nm_df)))
rownames(tvpro_nm_df) <- NULL
tvpro_nm_df
tvpro_nm_df$tvpro_nm  = gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df
user_d <- tvpro_nm_df
## adding words into dic :: buildDictionary()
dics <- c('sejong')
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
library(KoNLP); useSejongDic()
## mergeUserDic() ----
mergeUserDic(data.frame("사이다", "ncn"))
mergeUserDic(data.frame("한국은처음이지", "ncn"))
# data loadinng ----
tvpro <- read_delim("data/tvprograms.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(tvpro, 2)
head(tvpro, 2)$date
head(tvpro, 2)$title
head(tvpro, 2)$contents
# remove punctuation
tvpro$title <- gsub('[[:punct:]]+', "", tvpro$title)
tvpro$contents <- gsub('[[:punct:]]+', "", tvpro$contents)
# ko.words() 함수 만들기----
ko.words <- function(doc) {
d <- as.character(doc)
extractNoun(d)
}
# title에 TermDocumentMatirx 생성하기----
title <- tvpro$title
title[is.na(title)]
title[is.na(title)] <- 'dummy'
title[is.na(title)]
cps <- VCorpus(VectorSource(title))
# install.packages('tm')
# install.packages('rJava')
# install.packages('KoNLP')
# install.packages('SnowballC')
# install.packages('slam')
library(rJava)
library(SnowballC)
library(slam)
library(tm)
cps <- VCorpus(VectorSource(title))
tdm <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm
tdm_mat <- as.matrix(tdm)
tdm_mat
fix(tdm_mat)
dim(tdm_mat)
head(tvpro$title)
contents <- tvpro$contents
contents[is.na(contents)]
tpy_title <- head(tvpro$title)
toy_title <- head(tvpro$title); toy_title
### TDM 생성
options(mc.cores=1)
cps <- VCorpus(VectorSource(toy_title))
tdm <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm
tdm
tdm_mat <- as.matrix(tdm)
dim(tdm_mat)
tdm_mat
pro_name <- gsub(" ", "", tvpro_nm_df$tvpro_nm)
pro_name
rownames(tdm_mat) %in% pro_name
# 단어 사전에 추가하기----
tvpro_nm <- read_csv("./data/tvprograms_name.txt", col_names = FALSE)
tvpro_nm_df <- as.data.frame(t(tvpro_nm))
rownames(tvpro_nm_df) <- NULL; tvpro_nm_df
rep('ncn', nrow(tvpro_nm_df))
tvpro_nm_df <- data.frame(tvpro_nm = tvpro_nm_df$V1, tag=rep('ncn', nrow(tvpro_nm_df)))
rownames(tvpro_nm_df) <- NULL
tvpro_nm_df
user_d <- tvpro_nm_df
## adding words into dic :: buildDictionary()
dics <- c('sejong')
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
toy_title <- head(tvpro$title); toy_title
### TDM 생성
options(mc.cores=1)
cps <- VCorpus(VectorSource(toy_title))
tdm <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm
tdm_mat <- as.matrix(tdm)
dim(tdm_mat)
tdm_mat
rownames(tdm_mat) %in% pro_name
sum(rownames(tdm_mat) %in% pro_name)
tdm_mat[rownames(tdm_mat) %in% pro_name, ]
### TDM 생성
options(mc.cores=1)
cps <- VCorpus(VectorSource(title))
tdm <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm
tdm_mat <- as.matrix(tdm)
dim(tdm_mat)
# rownames(tdm_mat) %in% pro_name
sum(rownames(tdm_mat) %in% pro_name)
tdm_mat[rownames(tdm_mat) %in% pro_name, ]
fix(tdm_mat[rownames(tdm_mat) %in% pro_name, ])
View(tdm_mat[rownames(tdm_mat) %in% pro_name, ])
proname
pro_name
tvpro_nm_df$tvpro_nm
as.character(tvpro_nm_df$tvpro_nm)
as.character(tvpro_nm_df$tvpro_nm) + pro_name
union(as.character(tvpro_nm_df$tvpro_nm), pro_name)
pro_nm <- union(as.character(tvpro_nm_df$tvpro_nm), pro_name)
pro_nm_pasted <- gsub(" ", "", tvpro_nm_df$tvpro_nm)
pro_nm <- tvpro_nm_df
pro_nm_pasted <- gsub(" ", "", tvpro_nm_df$tvpro_nm)
tvpro_nm_df
pro_nm <- tvpro_nm_df$tvpro_nm
pro_nm_pasted <- gsub(" ", "", tvpro_nm_df$tvpro_nm)
union(pro_nm, pro_nm_pasted)
pro_name <- union(pro_nm, pro_nm_pasted)
pro_names <- union(pro_nm, pro_nm_pasted)
data.frame(tvpro_nm = pro_names, "ncn" )
user_d <- data.frame(tvpro_nm = pro_names, "ncn" )
## adding words into dic :: buildDictionary()
dics <- c('sejong')
category <- 'TV 프로그램'
buildDictionary(ext_dic=dics, category_dic_nms = category,
user_dic = user_d, replace_usr_dic = F)
### TDM 생성
options(mc.cores=1)
cps <- VCorpus(VectorSource(title))
tdm <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm
tdm_mat <- as.matrix(tdm)
dim(tdm_mat)
dimnames(tdm_mat)
dimnames(tdm_mat)$Terms
dimnames(tdm_mat)$Terms %in% pro_names
sum(dimnames(tdm_mat)$Terms %in% pro_names)
tdm[dimnames(tdm)$Terms %in% pro_names, ]
tdm_modi <- tdm[dimnames(tdm)$Terms %in% pro_names, ]
as.matrix(tdm_matrix)
as.matrix(tdm_modi)
title_mat <- as.matrix(tdm_modi)
str(title_mat)
rownames(title_mat)
sum(title_mat[1, ])
sum(title_mat[2, ])
sum(title_mat[3, ])
sum(title_mat[4, ])
sum(title_mat[6, ])
sum(title_mat[7, ])
sum(title_mat[7, ])
sum(title_mat[8, ])
sum(title_mat[9, ])
sum(title_mat[5, ]) # 278
## TDM 생성----
options(mc.cores=1)
cps <- VCorpus(VectorSource(title))
tdm_title <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm_title
tdm_title_mat <- as.matrix(tdm_title)
dim(tdm_mat_title)
dim(tdm_title_mat)
tdm_title
tdm_title_mat <- as.matrix(tdm_title)
dim(tdm_title_mat)
## pro_names가 있는 행들만 추출----
tdm_title_extracted <- tdm_title[dimnames(tdm_title)$Terms %in% pro_names, ]
title_mat <- as.matrix(tdm_title_extracted)
str(title_mat)
rownames(title_mat)
## title data만 보았을때 각 프로그램 이름이 들어간 문건의 횟수 확인
### 나중에 for 문으로...
sum(title_mat[1, ]) # 537 :: 1박2일은 537건의 문건에서 등장(title만 보았을때)
sum(title_mat[2, ]) # 210 :: 나혼자산다 210번
sum(title_mat[3, ]) # 742 :: 무한도전 742번
sum(title_mat[4, ]) # 17 :: 발칙한 동거
sum(title_mat[5, ]) # 474 :: 복면가왕
sum(title_mat[6, ]) # 278 :: 삼시세끼
sum(title_mat[7, ]) # 105 :: 아는형님
sum(title_mat[9, ]) # 363 :: 한끼줍쇼
sum(title_mat[8, ]) # 51 :: 정글의법칙
# contents data----
## TDM 생성----
options(mc.cores=1)
cps <- VCorpus(VectorSource(contents))
tdm_contents <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm_contents
# contents data----
## TDM 생성----
options(mc.cores=1)
cps <- VCorpus(VectorSource(contents))
tdm_contents <- TermDocumentMatrix(cps,
control = list(tokenize = ko.words,
removePunctuation=T,
wordLengths=c(2, 6),
weighting = weightTf))
tdm_contents
tdm_contents_mat <- as.matrix(tdm_contents)
dim(tdm_contents_mat)
## pro_names가 있는 행들만 추출----
tdm_contents_extracted <- tdm_contents[dimnames(tdm_contents)$Terms %in% pro_names, ]
contents_mat <- as.matrix(tdm_contents_extracted)
str(contents_mat)
rownames(contents_mat)
## contents data만 보았을때 각 프로그램 이름이 들어간 문건의 횟수 확인
### 나중에 for 문으로...
sum(contents_mat[1, ]) # 537 :: 1박2일은 537건의 문건에서 등장(title만 보았을때)
sum(contents_mat[2, ]) # 210 :: 나혼자산다 210번
sum(contents_mat[3, ]) # 742 :: 무한도전 742번
sum(contents_mat[4, ]) # 17 :: 발칙한 동거
sum(contents_mat[5, ]) # 474 :: 복면가왕
sum(contents_mat[6, ]) # 278 :: 삼시세끼
sum(contents_mat[7, ]) # 105 :: 아는형님
sum(contents_mat[8, ]) # 51 :: 정글의법칙
sum(contents_mat[8, ]) # 125 :: 정글의법칙
sum(contents_mat[9, ]) # 363 :: 한끼줍쇼
sum(contents_mat[9, ]) # 727 :: 한끼줍쇼
# sum matrix----
total_mat <- title_mat + contents_mat
# 날짜연산----
glimpse(tvpro)
tvpro$date
class(tvpro$date)
## 월별 집계를 위해 년도_월 변수 생성----
tvpro$month <- as.Date(tvpro$date, format=%Y-%m)
## 월별 집계를 위해 년도_월 변수 생성----
tvpro$month <- as.Date(tvpro$date, format='%Y-%m')
head(tvpro)
## 월별 집계를 위해 년도_월 변수 생성----
tvpro$month <- as.Date(tvpro$date, format='%Y%m')
head(tvpro)
## 월별 집계를 위해 년도_월 변수 생성----
tvpro$month <- format(tvpro$date, '%Y%m')
head(tvpro)
tvpro$month
## 월별 집계를 위해 년도_월 변수 생성----
tvpro$month <- format(tvpro$date, '%Y-%m')
tvpro$month[1:5]
# TDM -> DTM
t(total_mat)
# TDM -> DTM
tota_mat <- t(total_mat)
# TDM -> DTM
total_mat <- t(total_mat)
total_mat[1:5, ]
## total_mat에서 모든 원소가 0인 것은 제외하기
colsums <- colSums(total_mat)
colsums
# sum matrix----
total_mat <- title_mat + contents_mat
## total_mat에서 모든 원소가 0인 것은 제외하기
colsums <- colSums(total_mat)
colsums
# TDM -> DTM
total_mat <- t(total_mat)
dim(total_mat)
as.data.frame(total_mat)
head(as.data.frame(total_mat))
total_df <-  as.data.frame(total_mat)
cbind(data.frame(date = tvpro$date, month=tvpro$month),
total_df)
tvpro$month[1:5]
data <- cbind(data.frame(date = tvpro$date, month=tvpro$month), total_df)
head(data)
View(head(data))
# remove all 0 docs
data_met <- as.matrix(data)
# remove all 0 docs
data_mat <- as.matrix(data)
rowSums(data_mat)
rowSums(data_mat[, -c(1:2)])
data_mat[, 1]
data_mat[, -c(1:2)]
rowSums(data_mat[, -c(1:2)])
data_mat[, '복면가']
data_mat[, '복면가왕']
data_mat[, '복면가왕'][1]
class(data_mat[, '복면가왕'][1])
class(data_mat[, '복면가왕'])
# remove all 0 docs
data_mat <- as.matrix(data)
# add date and month columns----
head(as.data.frame(total_mat))
total_df <-  as.data.frame(total_mat)
data <- cbind(data.frame(date = tvpro$date, month=tvpro$month), total_df)
# remove all 0 docs
data_mat <- as.matrix(data)
data_mat[, -c(1:2)]
# add date and month columns----
head(as.data.frame(total_mat))
total_df <-  as.data.frame(total_mat)
total_df
dim(total_df)
date_df <- data.frame(date = tvpro$date, month=tvpro$month)
dim(date_df)
cbind(date_df, total_df)
data <- cbind(date_df, total_df)
# remove all 0 docs
data_mat <- as.matrix(data[, -c(1:2)])
data_mat
rowSums(data_mat[, -c(1:2)])
data_mat[rowSums(data_mat[, -c(1:2)] != 0)
data_mat[rowSums(data_mat[, -c(1:2)] != 0]
data_mat[rowSums(data_mat[, -c(1:2)] != 0, ]
data_mat[rowSums(data_mat[, -c(1:2)]) != 0]
dim(data_mat[rowSums(data_mat[, -c(1:2)]) != 0])
data_mat
rowSums(data_mat)
rowSums(data_mat) != 0
names(rowSums(data_mat) != 0)
idx <- as.numeric(names(rowSums(data_mat) != 0))
idx
length(idx)
head(data)
class(data)
data %>%
group_by(month) %>%
summarise(sum.1박2일 = sum("1박2일"))
data %>%
group_by(month) %>%
summarise(sum.1박2일 = sum(`1박2일``))
data %>%
group_by(month) %>%
summarise(sum.1박2일 = sum(`1박2일`))
data %>%
group_by(month) %>%
summarise(sum.1박2일 = sum(1박2일))
data %>%
group_by(month) %>%
summarise(sum.나혼자산다 = sum(나혼자산다))
colnames(data)
colnames(data) <- c("date"," month", "day_night", "live_alone", "endless_challenge", "cohabitting",
"masked_singer", "three_meals", "brother_known",  "juggle_life", "gimme_food" )
head(data)
data %>%
group_by(month) %>%
summarise(sum.day_night = sum(day_nght),
sum.live_alone = sum(live_alone),
sum.endless_challenge = sum(endless_challenge),
sum.cohabitting = sum(cohabitting),
sum.masked_singer =sum(masked_singer),
sum.three_meals = sum(three_meals),
sum.brother_known = sum(brother_known),
sum.juggle_life = sum(juggle_life),
sum.gimme_food = sum(gimme_food))
# aggregate date grouped by month
head(data)
class(data)
colnames(data) <- c("date", "month", "day_night", "live_alone", "endless_challenge", "cohabitting",
"masked_singer", "three_meals", "brother_known",  "juggle_life", "gimme_food" )
head(data)
data %>%
group_by(month) %>%
summarise(sum.day_night = sum(day_nght),
sum.live_alone = sum(live_alone),
sum.endless_challenge = sum(endless_challenge),
sum.cohabitting = sum(cohabitting),
sum.masked_singer =sum(masked_singer),
sum.three_meals = sum(three_meals),
sum.brother_known = sum(brother_known),
sum.juggle_life = sum(juggle_life),
sum.gimme_food = sum(gimme_food))
data %>%
group_by(month) %>%
summarise(sum.day_night = sum(day_night),
sum.live_alone = sum(live_alone),
sum.endless_challenge = sum(endless_challenge),
sum.cohabitting = sum(cohabitting),
sum.masked_singer =sum(masked_singer),
sum.three_meals = sum(three_meals),
sum.brother_known = sum(brother_known),
sum.juggle_life = sum(juggle_life),
sum.gimme_food = sum(gimme_food))
data %>%
group_by(month) %>%
summarise(sum.day_night = sum(day_night),
sum.live_alone = sum(live_alone),
sum.endless_challenge = sum(endless_challenge),
sum.cohabitting = sum(cohabitting),
sum.masked_singer =sum(masked_singer),
sum.three_meals = sum(three_meals),
sum.brother_known = sum(brother_known),
sum.juggle_life = sum(juggle_life),
sum.gimme_food = sum(gimme_food)) -> data_mon_sum
head(data_mon_sum)
melted <- melt(data_mon_sum , id.vars = 'month')
melted <- melt(data_mon_sum , id.vars = 'month'); head(melted)
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous((labels=precent_format()))
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous(labels=precent_format())
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous()
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous(labels = scales :: percent)
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='dodge', stat='identity') + scale_y_continuous(labels = scales :: percent)
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='dodge', stat='identity') + scale_y_continuous()
windows()
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='dodge', stat='identity') + scale_y_continuous()
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous(labels = scale :: percent)
ggplot(melted, aes(x=month, y=value, fill=variable)) +
geom_bar(position='fill', stat='identity') + scale_y_continuous(labels = scales :: percent)
