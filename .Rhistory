Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies', 'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# data loading----
read.csv('./data/groceries.csv')
# data loading----
read.csv('./data/groceries.csv') %>% head
# data loading----
read.csv('./data/groceries.csv', header=F) %>% head
# data loading----
head(tran)
tran %>% group_by(custid, ymd) %>%
summarise(basket_prods = paste(prod, sep = ','))
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ','))
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods)
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods) %>%>
arrange(ymd, custid)
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods) %>%
arrange(ymd, custid)
# data loading----
head(tran)
tran %>% group_by(custid, ymd) %>%
summarise(paste(prod, sep=','))
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number)
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number()) %>%
arrange(ymd, custid)
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number())
transaction_data <- ddply(tran,c("invoice_no"),
function(tran)paste(tran$prod, collapse = ","))
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
tran_tmp %>%
group_by(invoice_no) %>%
summarise(., funs_(paste(prod, collapse = ',')))
head(tran_tmp)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
# install.packages('arules')
library(arules)
Packages <- c('plyr', 'tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies', 'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
head(tran_tmp)
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
head(tran_tmp)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
# install.packages('arules')
library(arules)
Packages <- c('plyr', 'tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies', 'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
head(tran_tmp)
tran_tmp %>%
group_by(invoice_no) %>%
summarise(., funs_(paste(prod, collapse = ',')))
tran_tmp %>%
group_by(invoice_no) %>%
summarise(funs_(paste(prod, collapse = ',')))
transaction_data <- ddply(tran_tmp,c("invoice_no"),
function(tran_tmp)paste(tran_tmp$prod, collapse = ","))
head(transaction_data)
head(tran_tmp)
tran_tmp %>%
group_by(invoice_no) %>%
mutate(funs_(paste(prod, collapse = ',')))
head(tran_tmp)
tran_tmp %>%
group_by(invoice_no) %>%
mutate(paste(prod, collapse = ','))
tran_tmp %>%
group_by(invoice_no) %>%
summarise(basket = paste(prod, collapse = ','))
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
# making transaction_data for apriori----
transaction_data <- ddply(tran_tmp,c("invoice_no"),
function(tran_tmp)paste(tran_tmp$prod, collapse = ","))
head(transaction_data)
# making transaction_data for apriori----
head(tran_tmp)
transaction_data <- ddply(tran_tmp,c("invoice_no"),
function(tran_tmp)paste(tran_tmp$prod, collapse = ","))
head(transaction_data)
tran_tmp %>%
group_by(invoice_no) %>%
summarise(basket = paste(prod, collapse = ',')) -> transaction_data; head(transaction_data)
transaction_data[, 2]
write.csv(transaction_data[, 2], './data/groceries_data.csv')
## apply apriori----
groceries <- read.transactions("./data/groceries_data.csv", sep = ",")
summary(groceries)
# 처음 5개 거래 확인
inspect(groceries[1:5])
write.csv(transaction_data[, 2], './data/groceries_data.csv', col.names=FALSE)
## apply apriori----
groceries <- read.transactions("./data/groceries_data.csv", sep = ",")
summary(groceries)
# 처음 5개 거래 확인
inspect(groceries[1:5])
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 시각화
itemFrequencyPlot(groceries, support = 0.1)
tran_tmp %>%
group_by(invoice_no) %>%
summarise(paste(prod, collapse = ',')) -> transaction_data; head(transaction_data)
write.csv(transaction_data[, 2], './data/groceries_data.csv', col.names=FALSE)
write.table(transaction_data[, 2], './data/groceries_data.csv', col.names=FALSE)
# making transaction_data for apriori----
head(tran_tmp)
transaction_data <- ddply(tran_tmp,c("invoice_no"),
function(tran_tmp)paste(tran_tmp$prod, collapse = ","))
head(transaction_data)
tran_tmp %>%
group_by(invoice_no) %>%
summarise(paste(prod, collapse = ',')) -> transaction_data; head(transaction_data)
write.table(transaction_data[, 2], './data/groceries_data.csv', col.names=FALSE)
## apply apriori----
groceries <- read.transactions("./data/groceries_data.csv", sep = ",")
summary(groceries)
# 처음 5개 거래 확인
inspect(groceries[1:5])
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 시각화
itemFrequencyPlot(groceries, support = 0.1)
itemFrequencyPlot(groceries, topN = 20)
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:5])
# 100개 식료품의 무작위 샘플 시각화
image(sample(groceries, 100))
## 3단계 : 데이터에 대한 모델 훈련 ----
library(arules)
# 기본 설정
apriori(groceries)
# 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =
0.006, confidence = 0.25, minlen = 2))
groceryrules
## apply apriori----
groceries <- read.transactions("./data/groceries_data.csv", sep = ",")
summary(groceries)
transaction_data[, 2]
write.table(transaction_data[, 2], './data/groceries_data.csv',
row.names = FALSE,  col.names=FALSE)
a
## apply apriori----
groceries <- read.transactions("./data/groceries_data.csv", sep = ",")
summary(groceries)
# 처음 5개 거래 확인
inspect(groceries[1:5])
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 시각화
itemFrequencyPlot(groceries, support = 0.1)
itemFrequencyPlot(groceries, topN = 20)
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:5])
# 100개 식료품의 무작위 샘플 시각화
image(sample(groceries, 100))
## 3단계 : 데이터에 대한 모델 훈련 ----
library(arules)
# 기본 설정
apriori(groceries)
# 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =
0.006, confidence = 0.25, minlen = 2))
groceryrules
## 4단계 : 모델 성능 평가 ----
# 식료품 연관 규칙의 요약
summary(groceryrules)
# 처음 3개 규칙 확인
inspect(groceryrules[1:3])
# lift로 규칙 정렬
inspect(sort(groceryrules, by = "lift")[1:5])
# 딸기류 아이템을 포함하는 규칙의 부분 규칙 찾기
berryrules <- subset(groceryrules, items %in% "berries")
summary(groceries)
# 처음 5개 거래 확인
inspect(groceries[1:5])
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 시각화
itemFrequencyPlot(groceries, support = 0.5)
# 식료품의 빈도 시각화
# itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 20)
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:100])
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:1000])
summary(groceries)
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:4000])
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 100개 식료품의 무작위 샘플 시각화
image(sample(groceries, 100))
# 식료품의 빈도 확인
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 시각화
# itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 20)
# 기본 설정
apriori(groceries)
# 처음 5개 거래 확인----
inspect(groceries[1:5])
# 식료품의 빈도 확인----
itemFrequency(groceries[, 1:3])
# 식료품의 빈도 확인----
itemFrequency(groceries[, 1:50])
class(groceries)
# 처음 5개 거래 확인----
inspect(groceries[1:5])
# 식료품의 빈도 확인----
itemFrequency(groceries[, 1:50])
# 식료품의 빈도 시각화
# itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 20)
# 처음 5개 거래에 대한 희소 매트릭스 시각화
image(groceries[1:4000])
# 처음 5개 거래에 대한 희소 매트릭스 시각화
windows()
# 식료품의 빈도 시각화
# itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 20)
image(groceries[1:4000])
# 식료품의 빈도 시각화
# itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 20)
# 처음 5개 거래에 대한 희소 매트릭스 시각화
windows()
image(groceries[1:4000])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.25,
minlen = 2))
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.25,
minlen = 2)); groceryrules
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.25,
minlen = 2)); summary(groceryrules )
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.25,
minlen = 2)); summary(groceryrules)
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.25,
minlen = 2))
summary(groceryrules)
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.001,
minlen = 1))
summary(groceryrules)
inspect(groceryrules[1:10])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.002,
confidence = 0.002,
minlen = 1))
summary(groceryrules)
inspect(groceryrules[1:10])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.002,
confidence = 0.002,
minlen = 2))
summary(groceryrules)
confidence = 0.002)
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.002,
confidence = 0.002))
summary(groceryrules)
inspect(groceryrules[1:10])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.05,
confidence = 0.05))
summary(groceryrules)
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.01,
confidence = 0.01))
summary(groceryrules)
inspect(groceryrules[1:10])
inspect(groceryrules[1:17])
inspect(groceryrules[1:20])
inspect(groceryrules[1:17])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.001,
minlen = 2))
summary(groceryrules)
inspect(groceryrules[1:17])
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.001,
minlen = 0))
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.001,
confidence = 0.001,
minlen = 1))
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.0001,
confidence = 0.0001,
minlen = 2))
# ## 3단계 : 데이터에 대한 모델 훈련 ----
# library(arules)
#
# # 기본 설정
# apriori(groceries)
#
# # 규칙을 좀 더 학습히기 위해 지지도(support)와 신뢰도(confidence) 설정 변경
groceryrules <- apriori(groceries, parameter = list(support =0.00001,
confidence = 0.00001,
minlen = 2))
