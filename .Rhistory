coef(lm.fit)[-1]
plot(sim_beta_js, coef(lm.fit)[-1])
par(mfrow=c(1,1))
plot(sim_beta_js, coef(lm.fit)[-1])
# part c)
# Results in (b) have much more predictors which are not statistically significant
# comparing to the reult in (a)
sim_beta_js # :: univariate regression coefficients
names(Boston)
which.max(sim_beta_js)
names(Boston)[which.max(sim_beta_js) + 1]
coef(lm.fit)[which.max(sim_beta_js) + 1]
max(sim_beta_js)
for (name in names(Boston)[-1]){
predictor = c(t(subset(Boston, select=name)))
lm.fit = lm(crim ~ predictor + I(predictor^2) + I(predictor^3)) # adding non-linearity
print(paste('Running simple linear regression on:', name))
print(summary(lm.fit))
}
range(cust_prod_total_freq_15_amt_100$amt)
# make new var with bodyfat dataset by binning
# data loading
# install.packages('mfp')
library(mfp)
data(bodyfat)
glimpse(bodyfat);
bodyfat$bmi <- (bodyfat$weight*.45) / ((bodyfat$height * .02)^2)
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest')
lapply(Packages, library, character.only=T)
# make new var with bodyfat dataset by binning
# data loading
# install.packages('mfp')
library(mfp)
data(bodyfat)
glimpse(bodyfat);
bodyfat$bmi <- (bodyfat$weight*.45) / ((bodyfat$height * .02)^2)
bodyfat$bmi.bins <- cut(bodyfat$bmi,
c(0,25,30,200),
include.lowest = T,
labels=c('normal', 'overweight', 'obese'))
glimpse(bodyfat); levels(bodyfat$bmi.bins)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
rename(tran, hour = time) -> tran # colnames(tran)[which(names(tran) == "time")] <- "hour"와 같은 의미
head(tran)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest')
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest')
lapply(Packages, library, character.only=T)
# make new var with bodyfat dataset by binning
# data loading
# install.packages('mfp')
library(mfp)
data(bodyfat)
glimpse(bodyfat);
bodyfat$bmi <- (bodyfat$weight*.45) / ((bodyfat$height * .02)^2)
bodyfat$bmi.bins <- cut(bodyfat$bmi,
c(0,25,30,200),
include.lowest = T,
labels=c('normal', 'overweight', 'obese'))
glimpse(bodyfat); levels(bodyfat$bmi.bins)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
rename(tran, hour = time) -> tran # colnames(tran)[which(names(tran) == "time")] <- "hour"와 같은 의미
head(tran)
tran$hour <- as.numeric(substr(tran$hour, 1, 2))
glimpse(tran)
# h_bin
tran %>% mutate(h_bin = cut(hour,
breaks = c(0, 6, 12, 18, 23),
include.lowest = T, # 0을 그룹에 포함시키기 위해 반드시 필요, 아니면 NA값 반환됨.
labels=c('0-5', '6-11', '12-17', '18-23'))) -> tran
head(tran)
##with gapminder dataset
# install.packages('gapminder')
library(gapminder)
data("gapminder"); glimpse(gapminder)
unique(gapminder$country)
gapminder %>% filter(country == 'Korea, Rep.' & year==2007)
gapminder %>% arrange(year, country)
## 요약 통계량 출력하기
gapminder %>%
summarise(n_obs = n(),
n_countries = n_distinct(country),
n_years = n_distinct(year),
med_gdpc = median(gdpPercap),
max_gdppc = max(gdpPercap))
## 변수변환 > 컬럼추가하기(mutate())
gapminder %>%
mutate(total_gdp = pop*gdpPercap,
le_gdp_ratio = lifeExp / gdpPercap,
lgrk = le_gdp_ratio*100)
# 그룹연산
gapminder %>%
filter(year==2007) %>%
group_by(continent) %>%
summarise(n(), mean(lifeExp), median(lifeExp)) %>%
arrange(-`median(lifeExp)`)
# 요약통계량, 상관관계
summary(gapminder)
summary(gapminder$gdpPercap)
cor(gapminder$gdpPercap, gapminder$lifeExp)
plot(gapminder$gdpPercap, gapminder$lifeExp, cex=.5)
plot(log10(gapminder$gdpPercap), gapminder$lifeExp, cex=.5)
## with df_imdb dataset
df_imdb <- read_csv('./data/imdb-5000-movie-dataset.zip'); glimpse(df_imdb)
df_imdb %>% count(country) %>% arrange(-n)
## 미국 영화의 예산 분포 알아보기
df_imdb %>%
filter(country == 'USA') %>%
ggplot(aes(budget)) + geom_histogram()
df_imdb %>%
group_by(title_year) %>%
summarise(avg_imdb_score = mean(imdb_score)) %>%
ggplot(aes(title_year, avg_imdb_score)) + geom_point() + geom_line()
# 각 facter 별 갯수 및 percentage 확인
data(diamonds)
diamonds %>%
group_by(cut) %>%
tally() %>%
mutate(pct = round((n/sum(n))*100, 1))
cor(gapminder$gdpPercap, gapminder$lifeExp)
cor(gapminder$gdpPercap, gapminder$lifeExp)
cor(log10(gapminder$gdpPercap), gapminder$lifeExp)
# 데이터에 따른 시각화
# 1. 하나의 연속형(히스토그램)
hist(gapminder$lifeExp)
hist(gapminder$gdpPercap, nclass=50)
hist(log10(gapminder$gdpPercap), nclass=50)
gapminder %>%
ggplot(aes(gdpPercap)) + geom_histogram() + scale_x_log10()
gapminder %>%
ggplot(aes(x=gdpPercap, y=lifeExp)) + geom_point() +scale_x_log10() + geom_smooth()
# 2. 하나의 범주형 (막대그래프, 분할표) > 카이제곱 검정
diamonds %>% ggplot(aes(cut)) + geom_bar() # 품질별 개수
table(diamonds$cut)
prop.table(table(diamonds$cut))
round(prop.table(table(diamonds$cut)) * 100, 1)
head(table(survey$W.Hnd))
data(survey)
library(MASS)
data(survey)
head(table(survey$W.Hnd))
data(survey); glimpse(survey)
head(table(survey$W.Hnd))
chisq.test(table(survey$W.Hnd), p=c(.3, .7))
round(prop.table(table(diamonds$cut)) * 100, 1)
# 3. 두 수량형 변수 (산점도)
pairs(diamonds %>% sample_n(1000))
# 3. 두 수량형 변수 (산점도)
pairs(diamonds %>% sample_n(100))
ggpairs(diamonds %>% sample_n(100))
# 4. 수량형 ~ 범주형 (박스플롯)
mpg %>%
ggplot(aes(class, hwy)) + geom_boxplot()
mpg %>%
mutate(class=reorder(class, hwy))
mpg %>%
mutate(class=reorder(class, hwy, median))
mpg %>%
mutate(class=reorder(class, hwy, median)) %>% # hwy의 중간값 순서로 정렬
ggplot(aes(class, hwy)) + geom_jitter() + geom_boxplot(alpha=.5)
mpg %>%
mutate(class=factor(class,
levels=c('2seater', 'subcompact', 'compact', 'midsize',
'minivan', 'suv', 'pickup'))) %>% ## 순서 직접 지정
ggplot(aes(class, hwy)) + geom_jitter() + geom_boxplot(alpha=.5)
# 4. 범주형 ~ 범주형 (분할표 / 모자이크) > 카이제곱 검정
fread('./data/titanic3.csv', data.table = F)
# 4. 범주형 ~ 범주형 (분할표 / 모자이크) > 카이제곱 검정
fread('./data/titanic3.csv', data.table = F) -> titanic; glimpse(titanic)
xtabs(freq ~ class + sex + age + survived, data.frame(titanic))
xtabs(Freq ~ class + sex + age + survived, data.frame(titanic))
data("Titanic")
data("Titanic"); glimpse(Titanic)
xtabs(~ Class + Sex + Age + Survived, data.frame(Titanic))
xtabs(Freq ~ Class + Sex + Age + Survived, data.frame(Titanic))
xtabs(survived == 'survived' ~ sex + pclass, data=Titanic)
# 4. 범주형 ~ 범주형 (분할표 / 모자이크) > 카이제곱 검정
data("Titanic"); glimpse(Titanic)
as.tibble(fread('./data/titanic3.csv', data.table = F)) -> titanic
as.tibble(fread('./data/titanic3.csv', data.table = F)) -> titanic; glimpse(titanic)
titanic %>%
mutate_if(is.numeric, funs(imp=ifelse(is.na(.), median(., na.rm=T), .))) %>%
mutate_if(is.character, funs(imp=ifelse(is.na(.), "NA", .)))-> t_tmp; summary(t_tmp)
titanic$pclass <- as.factor(titanic$pclass)
titanic$ticket <- as.character(titanic$ticket)
titanic$survived <- factor(titanic$survived, levels=c(0,1), labels=c('dead', 'survived'))
glimpse(titanic)
as.tibble(fread('./data/titanic3.csv', data.table = F)) -> titanic; glimpse(titanic)
titanic %>% replace(is.na(.), 0) -> titanic
titanic$pclass <- as.factor(titanic$pclass)
titanic$ticket <- as.character(titanic$ticket)
titanic$survived <- factor(titanic$survived, levels=c(0,1), labels=c('dead', 'survived'))
glimpse(titanic)
titanic$sex <- as.factor(titanic$sex)
glimpse(titanic)
xtabs(survived == 'survived' ~ sex + pclass, data=titanic)
xtabs(survived == 'survived' ~ sex + pclass, data=titanic) / xtabs(~ sex + pclass, data=titanic)
# 성별과 사망률이 독립인지?
chisq.test(~ sex + survived, data=titanic)
# 성별과 사망률이 독립인지?
chisq.test(xtabs(~ sex + survived, data=titanic))
# mosaic plot----
mosaicplot(survived ~ pclass + sex, data = titanic, color=T)
head(tran)
# hour bin을 one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
install.packages('party')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
install.packages('TH.data')
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
# h_bin one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
head(tran,20)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
rename(tran, hour = time) -> tran # colnames(tran)[which(names(tran) == "time")] <- "hour"와 같은 의미
head(tran)
tran$hour <- as.numeric(substr(tran$hour, 1, 2))
glimpse(tran)
# h_bin
tran %>% mutate(h_bin = cut(hour,
breaks = c(0, 6, 12, 18, 23),
include.lowest = T, # 0을 그룹에 포함시키기 위해 반드시 필요, 아니면 NA값 반환됨.
labels=c('0-5', '6-11', '12-17', '18-23'))) -> tran
head(tran)
unique(tran$h_bin)
# h_bin one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
head(tran,20)
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h
# 고객별 구매시간 bin들의 합 구하기
df_h %>% group_by(custid) %>%
summarise(sum.h_6_11 = sum(`h_bin_6-11`),
sum.h_12_17 = sum(`h_bin_12-17`),
sum.h_18_23 = sum(`h_bin_18-23`)) -> cust_visit_h
# h_bin one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
head(tran,20)
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h
head(tran,20)
colnames(tran)
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, h_bin_6-11, h_bin_12-17, h_bin_18-23) -> df_h
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
# make new var with bodyfat dataset by binning
# data loading
# install.packages('mfp')
library(mfp)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
rename(tran, hour = time) -> tran # colnames(tran)[which(names(tran) == "time")] <- "hour"와 같은 의미
head(tran)
tran$hour <- as.numeric(substr(tran$hour, 1, 2))
glimpse(tran)
# h_bin
tran %>% mutate(h_bin = cut(hour,
breaks = c(0, 6, 12, 18, 23),
include.lowest = T, # 0을 그룹에 포함시키기 위해 반드시 필요, 아니면 NA값 반환됨.
labels=c('0-5', '6-11', '12-17', '18-23'))) -> tran
head(tran)
unique(tran$h_bin) # '0-5' 시간대가 없음에 유의
# h_bin one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
colnames(tran)
head(tran,20)
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies')
lapply(Packages, library, character.only=T)
# make new var with bodyfat dataset by binning
# data loading
# install.packages('mfp')
library(mfp)
data(bodyfat)
glimpse(bodyfat);
bodyfat$bmi <- (bodyfat$weight*.45) / ((bodyfat$height * .02)^2)
bodyfat$bmi.bins <- cut(bodyfat$bmi,
c(0,25,30,200),
include.lowest = T,
labels=c('normal', 'overweight', 'obese'))
glimpse(bodyfat); levels(bodyfat$bmi.bins)
# loading data
# binning bt time
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
rename(tran, hour = time) -> tran # colnames(tran)[which(names(tran) == "time")] <- "hour"와 같은 의미
head(tran)
tran$hour <- as.numeric(substr(tran$hour, 1, 2))
glimpse(tran)
# h_bin
tran %>% mutate(h_bin = cut(hour,
breaks = c(0, 6, 12, 18, 23),
include.lowest = T, # 0을 그룹에 포함시키기 위해 반드시 필요, 아니면 NA값 반환됨.
labels=c('0-5', '6-11', '12-17', '18-23'))) -> tran
head(tran)
unique(tran$h_bin) # '0-5' 시간대가 없음에 유의
# h_bin one-hot coding
tran <- dummy.data.frame(tran, names=c('h_bin'), sep='_')
colnames(tran)
head(tran,20)
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid)
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h
# 고객별 구매시간 비율을 알아보기 위해 필요한 변수만 선택
tran %>% select(custid, `h_bin_6-11`, `h_bin_12-17`, `h_bin_18-23`) -> df_h; head(df_h)
# 고객별 구매시간 bin들의 합 구하기
df_h %>% group_by(custid) %>%
summarise(sum.h_6_11 = sum(`h_bin_6-11`),
sum.h_12_17 = sum(`h_bin_12-17`),
sum.h_18_23 = sum(`h_bin_18-23`)) -> cust_visit_h
cust_visit_h %>% mutate(total_visitcount = rowSums(.[2:4])) -> cust_visit_h_total
ratio_visit_h <- round(cust_visit_h_total[, 2:4] / cust_visit_h_total$total_visitcount, 3)
head(ratio_visit_h)
dim(cust_visit_h)
ratio_cust_visit <- cbind(custid = cust_visit_h[, 1], ratio_visit_h)
head(ratio_cust_visit)
# install.packages('matrixStats')
library(matrixStats)
dim(ratio_cust_visit)
ratio_cust_visit[, -1] %>%
mutate(row_std = round(rowSds(as.matrix(.[1:3])), 3),
row_mean = round(rowMeans(as.matrix(.[1:3])), 3),
h_cv = row_std/row_mean) -> h_df
head(h_df)
range(h_df$h_cv)
h_df %>% filter(h_cv ==0)
head(h_df)
range(h_df$h_cv)
tran %>% left_join(h_df, by-'custid')
tran %>% left_join(h_df, by='custid')
head(ratio_cust_visit)
head(h_df)
cbind(tran, h_df) %>% head
head(cust_visit_h)
head(h_df)
cbind(cust_visit_h[, 1], h_df)
tran_h_df <- cbind(cust_visit_h[, 1], h_df)
tran_h_df <- cbind(cust_visit_h[, 1], h_df); head(tran_h_df)
install.packages('arules')
library(arules)
# install.packages('arules')
library(arules)
summary(Grocereis)
summary(Groceries)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
Packages <- c('tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies', 'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# data loading----
read.csv('./data/groceries.csv')
# data loading----
read.csv('./data/groceries.csv') %>% head
# data loading----
read.csv('./data/groceries.csv', header=F) %>% head
# data loading----
head(tran)
tran %>% group_by(custid, ymd) %>%
summarise(basket_prods = paste(prod, sep = ','))
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ','))
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods)
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods) %>%>
arrange(ymd, custid)
tran %>% group_by(custid, ymd) %>%
mutate(basket_prods = paste(prod, sep = ',')) %>%
select(ymd, custid, basket_prods) %>%
arrange(ymd, custid)
# data loading----
head(tran)
tran %>% group_by(custid, ymd) %>%
summarise(paste(prod, sep=','))
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number)
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number()) %>%
arrange(ymd, custid)
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, custid) %>%
mutate(invoice_no = group_number())
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number())
transaction_data <- ddply(tran,c("invoice_no"),
function(tran)paste(tran$prod, collapse = ","))
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
tran_tmp %>%
group_by(invoice_no) %>%
summarise(., funs_(paste(prod, collapse = ',')))
head(tran_tmp)
setwd("C:/Users/Daniel/ADP_performance_test")
getwd()
# install.packages('arules')
library(arules)
Packages <- c('plyr', 'tidyverse', 'data.table', 'reshape2', 'caret', 'rpart', 'GGally', 'ROCR', 'party',
'randomForest', 'dummies', 'curl', 'gridExtra')
lapply(Packages, library, character.only=T)
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
head(tran_tmp)
# data loading----
tran <- read.csv('./data/transaction.csv', stringsAsFactors = F)
head(tran)
# invoice numbering----
group_number = (function(){i = 0; function() i <<- i+1 })()
# df %>% group_by(u,v) %>% mutate(label = group_number())
tran %>%
arrange(ymd, time, custid) %>%
group_by(ymd, time, custid) %>%
mutate(invoice_no = group_number()) -> tran_tmp
head(tran_tmp)
